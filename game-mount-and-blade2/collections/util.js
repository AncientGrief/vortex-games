"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.genCollectionLoadOrder = exports.isModInCollection = exports.isValidMod = exports.CollectionParseError = exports.CollectionGenerateError = void 0;
const vortex_api_1 = require("vortex-api");
const common_1 = require("../common");
class CollectionGenerateError extends Error {
    constructor(why) {
        super(`Failed to generate game specific data for collection: ${why}`);
        this.name = 'CollectionGenerateError';
    }
}
exports.CollectionGenerateError = CollectionGenerateError;
class CollectionParseError extends Error {
    constructor(collectionName, why) {
        super(`Failed to parse game specific data for collection ${collectionName}: ${why}`);
        this.name = 'CollectionGenerateError';
    }
}
exports.CollectionParseError = CollectionParseError;
function isValidMod(mod) {
    return ((mod === null || mod === void 0 ? void 0 : mod.type) !== 'collection');
}
exports.isValidMod = isValidMod;
function isModInCollection(collectionMod, mod) {
    if (collectionMod.rules === undefined) {
        return false;
    }
    return collectionMod.rules.find(rule => vortex_api_1.util.testModReference(mod, rule.reference)) !== undefined;
}
exports.isModInCollection = isModInCollection;
function genCollectionLoadOrder(loadOrder, mods, collection) {
    const filteredMods = (collection !== undefined)
        ? Object.keys(mods)
            .filter(id => isValidMod(mods[id]) && isModInCollection(collection, mods[id]))
            .reduce((accum, iter) => {
            accum[iter] = mods[iter];
            return accum;
        }, {})
        : mods;
    const sortedMods = Object.keys(loadOrder)
        .filter(id => isValidSubMod(id, filteredMods))
        .sort((lhs, rhs) => loadOrder[lhs].pos - loadOrder[rhs].pos)
        .reduce((accum, iter, idx) => {
        accum[iter] = Object.assign(Object.assign({}, loadOrder[iter]), { pos: idx });
        return accum;
    }, {});
    return sortedMods;
}
exports.genCollectionLoadOrder = genCollectionLoadOrder;
function isValidSubMod(subModId, mods) {
    if (common_1.OFFICIAL_MODULES.has(subModId)) {
        return true;
    }
    const modIds = Object.keys(mods);
    const subModIds = modIds.reduce((accum, id) => { var _a, _b; return accum.concat([id], ((_b = (_a = mods[id]) === null || _a === void 0 ? void 0 : _a['attributes']) === null || _b === void 0 ? void 0 : _b['subModIds']) || []); }, []);
    return subModIds.map(id => id.toLowerCase()).includes(subModId.toLowerCase());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQXlDO0FBR3pDLHNDQUE2QztBQUU3QyxNQUFhLHVCQUF3QixTQUFRLEtBQUs7SUFDaEQsWUFBWSxHQUFXO1FBQ3JCLEtBQUssQ0FBQyx5REFBeUQsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsSUFBSSxHQUFHLHlCQUF5QixDQUFDO0lBQ3hDLENBQUM7Q0FDRjtBQUxELDBEQUtDO0FBRUQsTUFBYSxvQkFBcUIsU0FBUSxLQUFLO0lBQzdDLFlBQVksY0FBc0IsRUFBRSxHQUFXO1FBQzdDLEtBQUssQ0FBQyxxREFBcUQsY0FBYyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDckYsSUFBSSxDQUFDLElBQUksR0FBRyx5QkFBeUIsQ0FBQztJQUN4QyxDQUFDO0NBQ0Y7QUFMRCxvREFLQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxHQUFlO0lBQ3hDLE9BQU8sQ0FBQyxDQUFBLEdBQUcsYUFBSCxHQUFHLHVCQUFILEdBQUcsQ0FBRSxJQUFJLE1BQUssWUFBWSxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUZELGdDQUVDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsYUFBeUIsRUFBRSxHQUFlO0lBQzFFLElBQUksYUFBYSxDQUFDLEtBQUssS0FBSyxTQUFTLEVBQUU7UUFDckMsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDckMsaUJBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDO0FBQzlELENBQUM7QUFQRCw4Q0FPQztBQUVELFNBQWdCLHNCQUFzQixDQUFDLFNBQStDLEVBQy9DLElBQXFDLEVBQ3JDLFVBQXVCO0lBQzVELE1BQU0sWUFBWSxHQUFHLENBQUMsVUFBVSxLQUFLLFNBQVMsQ0FBQztRQUM3QyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDZCxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksaUJBQWlCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzdFLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUN0QixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNWLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFFVCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUN0QyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQzdDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztTQUMzRCxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUMsbUNBQ04sU0FBUyxDQUFDLElBQUksQ0FBQyxLQUNsQixHQUFHLEVBQUUsR0FBRyxHQUNULENBQUM7UUFDRixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNULE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUF2QkQsd0RBdUJDO0FBRUQsU0FBUyxhQUFhLENBQUMsUUFBZ0IsRUFBRSxJQUFxQztJQUM1RSxJQUFJLHlCQUFnQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUVsQyxPQUFPLElBQUksQ0FBQztLQUNiO0lBSUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxNQUFNLFNBQVMsR0FBYSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLGVBQ3RELE9BQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUEsTUFBQSxNQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsMENBQUcsWUFBWSxDQUFDLDBDQUFHLFdBQVcsQ0FBQyxLQUFJLEVBQUUsQ0FBQyxDQUFBLEVBQUEsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUV6RSxPQUFPLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHR5cGVzLCB1dGlsIH0gZnJvbSAndm9ydGV4LWFwaSc7XHJcbmltcG9ydCB7IElMb2FkT3JkZXIsIElMb2FkT3JkZXJFbnRyeSB9IGZyb20gJy4uL3R5cGVzJztcclxuXHJcbmltcG9ydCB7IE9GRklDSUFMX01PRFVMRVMgfSBmcm9tICcuLi9jb21tb24nO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbGxlY3Rpb25HZW5lcmF0ZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gIGNvbnN0cnVjdG9yKHdoeTogc3RyaW5nKSB7XHJcbiAgICBzdXBlcihgRmFpbGVkIHRvIGdlbmVyYXRlIGdhbWUgc3BlY2lmaWMgZGF0YSBmb3IgY29sbGVjdGlvbjogJHt3aHl9YCk7XHJcbiAgICB0aGlzLm5hbWUgPSAnQ29sbGVjdGlvbkdlbmVyYXRlRXJyb3InO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbGxlY3Rpb25QYXJzZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb25OYW1lOiBzdHJpbmcsIHdoeTogc3RyaW5nKSB7XHJcbiAgICBzdXBlcihgRmFpbGVkIHRvIHBhcnNlIGdhbWUgc3BlY2lmaWMgZGF0YSBmb3IgY29sbGVjdGlvbiAke2NvbGxlY3Rpb25OYW1lfTogJHt3aHl9YCk7XHJcbiAgICB0aGlzLm5hbWUgPSAnQ29sbGVjdGlvbkdlbmVyYXRlRXJyb3InO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRNb2QobW9kOiB0eXBlcy5JTW9kKSB7XHJcbiAgcmV0dXJuIChtb2Q/LnR5cGUgIT09ICdjb2xsZWN0aW9uJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc01vZEluQ29sbGVjdGlvbihjb2xsZWN0aW9uTW9kOiB0eXBlcy5JTW9kLCBtb2Q6IHR5cGVzLklNb2QpIHtcclxuICBpZiAoY29sbGVjdGlvbk1vZC5ydWxlcyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY29sbGVjdGlvbk1vZC5ydWxlcy5maW5kKHJ1bGUgPT5cclxuICAgIHV0aWwudGVzdE1vZFJlZmVyZW5jZShtb2QsIHJ1bGUucmVmZXJlbmNlKSkgIT09IHVuZGVmaW5lZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbkNvbGxlY3Rpb25Mb2FkT3JkZXIobG9hZE9yZGVyOiB7IFttb2RJZDogc3RyaW5nXTogSUxvYWRPcmRlckVudHJ5IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZHM6IHsgW21vZElkOiBzdHJpbmddOiB0eXBlcy5JTW9kIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24/OiB0eXBlcy5JTW9kKTogSUxvYWRPcmRlciB7XHJcbiAgY29uc3QgZmlsdGVyZWRNb2RzID0gKGNvbGxlY3Rpb24gIT09IHVuZGVmaW5lZClcclxuICAgID8gT2JqZWN0LmtleXMobW9kcylcclxuICAgICAgICAuZmlsdGVyKGlkID0+IGlzVmFsaWRNb2QobW9kc1tpZF0pICYmIGlzTW9kSW5Db2xsZWN0aW9uKGNvbGxlY3Rpb24sIG1vZHNbaWRdKSlcclxuICAgICAgICAucmVkdWNlKChhY2N1bSwgaXRlcikgPT4ge1xyXG4gICAgICAgICAgYWNjdW1baXRlcl0gPSBtb2RzW2l0ZXJdO1xyXG4gICAgICAgICAgcmV0dXJuIGFjY3VtO1xyXG4gICAgICAgIH0sIHt9KVxyXG4gICAgOiBtb2RzO1xyXG5cclxuICBjb25zdCBzb3J0ZWRNb2RzID0gT2JqZWN0LmtleXMobG9hZE9yZGVyKVxyXG4gICAgLmZpbHRlcihpZCA9PiBpc1ZhbGlkU3ViTW9kKGlkLCBmaWx0ZXJlZE1vZHMpKVxyXG4gICAgLnNvcnQoKGxocywgcmhzKSA9PiBsb2FkT3JkZXJbbGhzXS5wb3MgLSBsb2FkT3JkZXJbcmhzXS5wb3MpXHJcbiAgICAucmVkdWNlKChhY2N1bSwgaXRlciwgaWR4KSA9PiB7XHJcbiAgICAgIGFjY3VtW2l0ZXJdID0ge1xyXG4gICAgICAgIC4uLmxvYWRPcmRlcltpdGVyXSxcclxuICAgICAgICBwb3M6IGlkeCxcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIGFjY3VtO1xyXG4gICAgfSwge30pO1xyXG4gIHJldHVybiBzb3J0ZWRNb2RzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1ZhbGlkU3ViTW9kKHN1Yk1vZElkOiBzdHJpbmcsIG1vZHM6IHsgW21vZElkOiBzdHJpbmddOiB0eXBlcy5JTW9kIH0pIHtcclxuICBpZiAoT0ZGSUNJQUxfTU9EVUxFUy5oYXMoc3ViTW9kSWQpKSB7XHJcbiAgICAvLyBvZmZpY2lhbCBtb2R1bGVzIGFyZSBhbHdheXMgaW5jbHVkZWQuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8vIFRoZSBtb2RzIG1hcCBzaG91bGQgb25seSBpbmNsdWRlIG1vZHMgdGhhdCBoYXZlIGJlZW4gaW5jbHVkZWQgaW4gdGhlXHJcbiAgLy8gIGNvbGxlY3Rpb24gb3IgdGhpcyB3b24ndCB3b3JrLlxyXG4gIGNvbnN0IG1vZElkcyA9IE9iamVjdC5rZXlzKG1vZHMpO1xyXG4gIGNvbnN0IHN1Yk1vZElkczogc3RyaW5nW10gPSBtb2RJZHMucmVkdWNlKChhY2N1bSwgaWQpID0+XHJcbiAgICBhY2N1bS5jb25jYXQoW2lkXSwgbW9kc1tpZF0/LlsnYXR0cmlidXRlcyddPy5bJ3N1Yk1vZElkcyddIHx8IFtdKSwgW10pO1xyXG5cclxuICByZXR1cm4gc3ViTW9kSWRzLm1hcChpZCA9PiBpZC50b0xvd2VyQ2FzZSgpKS5pbmNsdWRlcyhzdWJNb2RJZC50b0xvd2VyQ2FzZSgpKTtcclxufVxyXG4iXX0=