"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.genCollectionLoadOrder = exports.isModInCollection = exports.isValidMod = exports.CollectionParseError = exports.CollectionGenerateError = void 0;
const vortex_api_1 = require("vortex-api");
const common_1 = require("../common");
class CollectionGenerateError extends Error {
    constructor(why) {
        super(`Failed to generate game specific data for collection: ${why}`);
        this.name = 'CollectionGenerateError';
    }
}
exports.CollectionGenerateError = CollectionGenerateError;
class CollectionParseError extends Error {
    constructor(collectionName, why) {
        super(`Failed to parse game specific data for collection ${collectionName}: ${why}`);
        this.name = 'CollectionGenerateError';
    }
}
exports.CollectionParseError = CollectionParseError;
function isValidMod(mod) {
    return ((mod === null || mod === void 0 ? void 0 : mod.type) !== 'collection');
}
exports.isValidMod = isValidMod;
function isModInCollection(collectionMod, mod) {
    if (collectionMod.rules === undefined) {
        return false;
    }
    return collectionMod.rules.find(rule => vortex_api_1.util.testModReference(mod, rule.reference)) !== undefined;
}
exports.isModInCollection = isModInCollection;
function genCollectionLoadOrder(loadOrder, mods, collection) {
    const filteredMods = (collection !== undefined)
        ? Object.keys(mods)
            .filter(id => isValidMod(mods[id]) && isModInCollection(collection, mods[id]))
            .reduce((accum, iter) => {
            accum[iter] = mods[iter];
            return accum;
        }, {})
        : mods;
    const sortedMods = Object.keys(loadOrder)
        .filter(id => isValidSubMod(id, filteredMods))
        .sort((lhs, rhs) => loadOrder[lhs].pos - loadOrder[rhs].pos)
        .reduce((accum, iter, idx) => {
        accum[iter] = Object.assign(Object.assign({}, loadOrder[iter]), { pos: idx });
        return accum;
    }, {});
    return sortedMods;
}
exports.genCollectionLoadOrder = genCollectionLoadOrder;
function isValidSubMod(subModId, mods) {
    if (common_1.OFFICIAL_MODULES.has(subModId)) {
        return true;
    }
    const modIds = Object.keys(mods);
    const subModIds = modIds.reduce((accum, id) => { var _a, _b; return accum.concat([id], ((_b = (_a = mods[id]) === null || _a === void 0 ? void 0 : _a['attributes']) === null || _b === void 0 ? void 0 : _b['subModIds']) || []); }, []);
    return subModIds.map(id => id.toLowerCase()).includes(subModId.toLowerCase());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQXlDO0FBR3pDLHNDQUE2QztBQUU3QyxNQUFhLHVCQUF3QixTQUFRLEtBQUs7SUFDaEQsWUFBWSxHQUFXO1FBQ3JCLEtBQUssQ0FBQyx5REFBeUQsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsSUFBSSxHQUFHLHlCQUF5QixDQUFDO0lBQ3hDLENBQUM7Q0FDRjtBQUxELDBEQUtDO0FBRUQsTUFBYSxvQkFBcUIsU0FBUSxLQUFLO0lBQzdDLFlBQVksY0FBc0IsRUFBRSxHQUFXO1FBQzdDLEtBQUssQ0FBQyxxREFBcUQsY0FBYyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDckYsSUFBSSxDQUFDLElBQUksR0FBRyx5QkFBeUIsQ0FBQztJQUN4QyxDQUFDO0NBQ0Y7QUFMRCxvREFLQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxHQUFlO0lBQ3hDLE9BQU8sQ0FBQyxDQUFBLEdBQUcsYUFBSCxHQUFHLHVCQUFILEdBQUcsQ0FBRSxJQUFJLE1BQUssWUFBWSxDQUFDLENBQUM7QUFDdEMsQ0FBQztBQUZELGdDQUVDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsYUFBeUIsRUFBRSxHQUFlO0lBQzFFLElBQUksYUFBYSxDQUFDLEtBQUssS0FBSyxTQUFTLEVBQUU7UUFDckMsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDckMsaUJBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDO0FBQzlELENBQUM7QUFQRCw4Q0FPQztBQUVELFNBQWdCLHNCQUFzQixDQUFDLFNBQStDLEVBQy9DLElBQXFDLEVBQ3JDLFVBQXVCO0lBQzVELE1BQU0sWUFBWSxHQUFHLENBQUMsVUFBVSxLQUFLLFNBQVMsQ0FBQztRQUM3QyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDZCxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksaUJBQWlCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzdFLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUN0QixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNWLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFFVCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUN0QyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQzdDLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztTQUMzRCxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUMsbUNBQ04sU0FBUyxDQUFDLElBQUksQ0FBQyxLQUNsQixHQUFHLEVBQUUsR0FBRyxHQUNULENBQUM7UUFDRixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNULE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUF2QkQsd0RBdUJDO0FBRUQsU0FBUyxhQUFhLENBQUMsUUFBZ0IsRUFBRSxJQUFxQztJQUM1RSxJQUFJLHlCQUFnQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUVsQyxPQUFPLElBQUksQ0FBQztLQUNiO0lBSUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxNQUFNLFNBQVMsR0FBYSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLGVBQ3RELE9BQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLGFBQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQywwQ0FBRyxZQUFZLDJDQUFJLFdBQVcsTUFBSyxFQUFFLENBQUMsQ0FBQSxFQUFBLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFekUsT0FBTyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ2hGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlcywgdXRpbCB9IGZyb20gJ3ZvcnRleC1hcGknO1xyXG5pbXBvcnQgeyBJTG9hZE9yZGVyLCBJTG9hZE9yZGVyRW50cnkgfSBmcm9tICcuLi90eXBlcyc7XHJcblxyXG5pbXBvcnQgeyBPRkZJQ0lBTF9NT0RVTEVTIH0gZnJvbSAnLi4vY29tbW9uJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDb2xsZWN0aW9uR2VuZXJhdGVFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICBjb25zdHJ1Y3Rvcih3aHk6IHN0cmluZykge1xyXG4gICAgc3VwZXIoYEZhaWxlZCB0byBnZW5lcmF0ZSBnYW1lIHNwZWNpZmljIGRhdGEgZm9yIGNvbGxlY3Rpb246ICR7d2h5fWApO1xyXG4gICAgdGhpcy5uYW1lID0gJ0NvbGxlY3Rpb25HZW5lcmF0ZUVycm9yJztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb2xsZWN0aW9uUGFyc2VFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uTmFtZTogc3RyaW5nLCB3aHk6IHN0cmluZykge1xyXG4gICAgc3VwZXIoYEZhaWxlZCB0byBwYXJzZSBnYW1lIHNwZWNpZmljIGRhdGEgZm9yIGNvbGxlY3Rpb24gJHtjb2xsZWN0aW9uTmFtZX06ICR7d2h5fWApO1xyXG4gICAgdGhpcy5uYW1lID0gJ0NvbGxlY3Rpb25HZW5lcmF0ZUVycm9yJztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkTW9kKG1vZDogdHlwZXMuSU1vZCkge1xyXG4gIHJldHVybiAobW9kPy50eXBlICE9PSAnY29sbGVjdGlvbicpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNNb2RJbkNvbGxlY3Rpb24oY29sbGVjdGlvbk1vZDogdHlwZXMuSU1vZCwgbW9kOiB0eXBlcy5JTW9kKSB7XHJcbiAgaWYgKGNvbGxlY3Rpb25Nb2QucnVsZXMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGNvbGxlY3Rpb25Nb2QucnVsZXMuZmluZChydWxlID0+XHJcbiAgICB1dGlsLnRlc3RNb2RSZWZlcmVuY2UobW9kLCBydWxlLnJlZmVyZW5jZSkpICE9PSB1bmRlZmluZWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5Db2xsZWN0aW9uTG9hZE9yZGVyKGxvYWRPcmRlcjogeyBbbW9kSWQ6IHN0cmluZ106IElMb2FkT3JkZXJFbnRyeSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RzOiB7IFttb2RJZDogc3RyaW5nXTogdHlwZXMuSU1vZCB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uPzogdHlwZXMuSU1vZCk6IElMb2FkT3JkZXIge1xyXG4gIGNvbnN0IGZpbHRlcmVkTW9kcyA9IChjb2xsZWN0aW9uICE9PSB1bmRlZmluZWQpXHJcbiAgICA/IE9iamVjdC5rZXlzKG1vZHMpXHJcbiAgICAgICAgLmZpbHRlcihpZCA9PiBpc1ZhbGlkTW9kKG1vZHNbaWRdKSAmJiBpc01vZEluQ29sbGVjdGlvbihjb2xsZWN0aW9uLCBtb2RzW2lkXSkpXHJcbiAgICAgICAgLnJlZHVjZSgoYWNjdW0sIGl0ZXIpID0+IHtcclxuICAgICAgICAgIGFjY3VtW2l0ZXJdID0gbW9kc1tpdGVyXTtcclxuICAgICAgICAgIHJldHVybiBhY2N1bTtcclxuICAgICAgICB9LCB7fSlcclxuICAgIDogbW9kcztcclxuXHJcbiAgY29uc3Qgc29ydGVkTW9kcyA9IE9iamVjdC5rZXlzKGxvYWRPcmRlcilcclxuICAgIC5maWx0ZXIoaWQgPT4gaXNWYWxpZFN1Yk1vZChpZCwgZmlsdGVyZWRNb2RzKSlcclxuICAgIC5zb3J0KChsaHMsIHJocykgPT4gbG9hZE9yZGVyW2xoc10ucG9zIC0gbG9hZE9yZGVyW3Joc10ucG9zKVxyXG4gICAgLnJlZHVjZSgoYWNjdW0sIGl0ZXIsIGlkeCkgPT4ge1xyXG4gICAgICBhY2N1bVtpdGVyXSA9IHtcclxuICAgICAgICAuLi5sb2FkT3JkZXJbaXRlcl0sXHJcbiAgICAgICAgcG9zOiBpZHgsXHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybiBhY2N1bTtcclxuICAgIH0sIHt9KTtcclxuICByZXR1cm4gc29ydGVkTW9kcztcclxufVxyXG5cclxuZnVuY3Rpb24gaXNWYWxpZFN1Yk1vZChzdWJNb2RJZDogc3RyaW5nLCBtb2RzOiB7IFttb2RJZDogc3RyaW5nXTogdHlwZXMuSU1vZCB9KSB7XHJcbiAgaWYgKE9GRklDSUFMX01PRFVMRVMuaGFzKHN1Yk1vZElkKSkge1xyXG4gICAgLy8gb2ZmaWNpYWwgbW9kdWxlcyBhcmUgYWx3YXlzIGluY2x1ZGVkLlxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvLyBUaGUgbW9kcyBtYXAgc2hvdWxkIG9ubHkgaW5jbHVkZSBtb2RzIHRoYXQgaGF2ZSBiZWVuIGluY2x1ZGVkIGluIHRoZVxyXG4gIC8vICBjb2xsZWN0aW9uIG9yIHRoaXMgd29uJ3Qgd29yay5cclxuICBjb25zdCBtb2RJZHMgPSBPYmplY3Qua2V5cyhtb2RzKTtcclxuICBjb25zdCBzdWJNb2RJZHM6IHN0cmluZ1tdID0gbW9kSWRzLnJlZHVjZSgoYWNjdW0sIGlkKSA9PlxyXG4gICAgYWNjdW0uY29uY2F0KFtpZF0sIG1vZHNbaWRdPy5bJ2F0dHJpYnV0ZXMnXT8uWydzdWJNb2RJZHMnXSB8fCBbXSksIFtdKTtcclxuXHJcbiAgcmV0dXJuIHN1Yk1vZElkcy5tYXAoaWQgPT4gaWQudG9Mb3dlckNhc2UoKSkuaW5jbHVkZXMoc3ViTW9kSWQudG9Mb3dlckNhc2UoKSk7XHJcbn1cclxuIl19