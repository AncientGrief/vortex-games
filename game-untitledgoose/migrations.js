"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrate020 = exports.migrate010 = void 0;
const harmony_patcher_1 = require("harmony-patcher");
const path_1 = __importDefault(require("path"));
const semver_1 = __importDefault(require("semver"));
const vortex_api_1 = require("vortex-api");
const statics_1 = require("./statics");
const util_1 = require("./util");
function migrate010(context, oldVersion) {
    if (semver_1.default.gte(oldVersion, '0.1.0')) {
        return Promise.resolve();
    }
    const state = context.api.store.getState();
    const discoveryPath = (0, util_1.getDiscoveryPath)(state);
    if (discoveryPath === undefined) {
        return Promise.resolve();
    }
    const absPath = path_1.default.join(discoveryPath, statics_1.DATAPATH);
    const assemblyPath = path_1.default.join(absPath, 'VortexHarmonyInstaller.dll');
    return vortex_api_1.fs.statAsync(assemblyPath)
        .then(() => (0, harmony_patcher_1.runPatcher)(__dirname, absPath, statics_1.ENTRY_POINT, true, path_1.default.join((0, util_1.getDiscoveryPath)(state), statics_1.DATAPATH, 'VortexMods')))
        .catch(err => err.code === 'ENOENT' ? Promise.resolve() : Promise.reject(err));
}
exports.migrate010 = migrate010;
function migrate020(context, oldVersion) {
    if (semver_1.default.gte(oldVersion, '0.2.0')) {
        return Promise.resolve();
    }
    const discoveryPath = (0, util_1.getDiscoveryPath)(context.api.getState());
    if (discoveryPath === undefined) {
        return Promise.resolve();
    }
    const modsPath = path_1.default.join(discoveryPath, statics_1.DATAPATH, 'VortexMods');
    return context.api.awaitUI()
        .then(() => vortex_api_1.fs.ensureDirWritableAsync(modsPath))
        .then(() => context.api.emitAndAwait('purge-mods-in-path', statics_1.GAME_ID, '', modsPath));
}
exports.migrate020 = migrate020;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlncmF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1pZ3JhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscURBQTZDO0FBQzdDLGdEQUF3QjtBQUN4QixvREFBNEI7QUFDNUIsMkNBQWdDO0FBRWhDLHVDQUEyRDtBQUMzRCxpQ0FBMEM7QUFFMUMsU0FBZ0IsVUFBVSxDQUFDLE9BQU8sRUFBRSxVQUFVO0lBQzVDLElBQUksZ0JBQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxFQUFFO1FBQ25DLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQzFCO0lBRUQsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0MsTUFBTSxhQUFhLEdBQUcsSUFBQSx1QkFBZ0IsRUFBQyxLQUFLLENBQUMsQ0FBQztJQUM5QyxJQUFJLGFBQWEsS0FBSyxTQUFTLEVBQUU7UUFHL0IsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDMUI7SUFFRCxNQUFNLE9BQU8sR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxrQkFBUSxDQUFDLENBQUM7SUFDbkQsTUFBTSxZQUFZLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztJQUV0RSxPQUFPLGVBQUUsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO1NBQzlCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFBLDRCQUFVLEVBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxxQkFBVyxFQUFFLElBQUksRUFDMUQsY0FBSSxDQUFDLElBQUksQ0FBQyxJQUFBLHVCQUFnQixFQUFDLEtBQUssQ0FBQyxFQUFFLGtCQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztTQUM3RCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDbkYsQ0FBQztBQXBCRCxnQ0FvQkM7QUFFRCxTQUFnQixVQUFVLENBQUMsT0FBTyxFQUFFLFVBQVU7SUFDNUMsSUFBSSxnQkFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLEVBQUU7UUFDbkMsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDMUI7SUFFRCxNQUFNLGFBQWEsR0FBRyxJQUFBLHVCQUFnQixFQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMvRCxJQUFJLGFBQWEsS0FBSyxTQUFTLEVBQUU7UUFHL0IsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDMUI7SUFDRCxNQUFNLFFBQVEsR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxrQkFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBRWxFLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUU7U0FDekIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLGVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMvQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsb0JBQW9CLEVBQUUsaUJBQU8sRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUN2RixDQUFDO0FBaEJELGdDQWdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJ1blBhdGNoZXIgfSBmcm9tICdoYXJtb255LXBhdGNoZXInO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IHNlbXZlciBmcm9tICdzZW12ZXInO1xyXG5pbXBvcnQgeyBmcyB9IGZyb20gJ3ZvcnRleC1hcGknO1xyXG5cclxuaW1wb3J0IHsgREFUQVBBVEgsIEVOVFJZX1BPSU5ULCBHQU1FX0lEIH0gZnJvbSAnLi9zdGF0aWNzJztcclxuaW1wb3J0IHsgZ2V0RGlzY292ZXJ5UGF0aCB9IGZyb20gJy4vdXRpbCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWlncmF0ZTAxMChjb250ZXh0LCBvbGRWZXJzaW9uKSB7XHJcbiAgaWYgKHNlbXZlci5ndGUob2xkVmVyc2lvbiwgJzAuMS4wJykpIHtcclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHN0YXRlID0gY29udGV4dC5hcGkuc3RvcmUuZ2V0U3RhdGUoKTtcclxuICBjb25zdCBkaXNjb3ZlcnlQYXRoID0gZ2V0RGlzY292ZXJ5UGF0aChzdGF0ZSk7XHJcbiAgaWYgKGRpc2NvdmVyeVBhdGggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgLy8gR2FtZSB3YXMgbm90IGRpc2NvdmVyZWQsIHRoaXMgaXMgYSB2YWxpZCB1c2UgY2FzZS5cclxuICAgIC8vICBVc2VyIG1pZ2h0IG5vdCBvd24gdGhlIGdhbWUuXHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBhYnNQYXRoID0gcGF0aC5qb2luKGRpc2NvdmVyeVBhdGgsIERBVEFQQVRIKTtcclxuICBjb25zdCBhc3NlbWJseVBhdGggPSBwYXRoLmpvaW4oYWJzUGF0aCwgJ1ZvcnRleEhhcm1vbnlJbnN0YWxsZXIuZGxsJyk7XHJcbiAgLy8gVGVzdCBpZiB0aGUgcGF0Y2ggZXhpc3RzIGFuZCByZW1vdmUgaXQsIGlmIGl0IGlzLlxyXG4gIHJldHVybiBmcy5zdGF0QXN5bmMoYXNzZW1ibHlQYXRoKVxyXG4gICAgLnRoZW4oKCkgPT4gcnVuUGF0Y2hlcihfX2Rpcm5hbWUsIGFic1BhdGgsIEVOVFJZX1BPSU5ULCB0cnVlLFxyXG4gICAgICBwYXRoLmpvaW4oZ2V0RGlzY292ZXJ5UGF0aChzdGF0ZSksIERBVEFQQVRILCAnVm9ydGV4TW9kcycpKSlcclxuICAgIC5jYXRjaChlcnIgPT4gZXJyLmNvZGUgPT09ICdFTk9FTlQnID8gUHJvbWlzZS5yZXNvbHZlKCkgOiBQcm9taXNlLnJlamVjdChlcnIpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1pZ3JhdGUwMjAoY29udGV4dCwgb2xkVmVyc2lvbikge1xyXG4gIGlmIChzZW12ZXIuZ3RlKG9sZFZlcnNpb24sICcwLjIuMCcpKSB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBkaXNjb3ZlcnlQYXRoID0gZ2V0RGlzY292ZXJ5UGF0aChjb250ZXh0LmFwaS5nZXRTdGF0ZSgpKTtcclxuICBpZiAoZGlzY292ZXJ5UGF0aCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAvLyBHYW1lIHdhcyBub3QgZGlzY292ZXJlZCwgdGhpcyBpcyBhIHZhbGlkIHVzZSBjYXNlLlxyXG4gICAgLy8gIFVzZXIgbWlnaHQgbm90IG93biB0aGUgZ2FtZS5cclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICB9XHJcbiAgY29uc3QgbW9kc1BhdGggPSBwYXRoLmpvaW4oZGlzY292ZXJ5UGF0aCwgREFUQVBBVEgsICdWb3J0ZXhNb2RzJyk7XHJcblxyXG4gIHJldHVybiBjb250ZXh0LmFwaS5hd2FpdFVJKClcclxuICAgIC50aGVuKCgpID0+IGZzLmVuc3VyZURpcldyaXRhYmxlQXN5bmMobW9kc1BhdGgpKVxyXG4gICAgLnRoZW4oKCkgPT4gY29udGV4dC5hcGkuZW1pdEFuZEF3YWl0KCdwdXJnZS1tb2RzLWluLXBhdGgnLCBHQU1FX0lELCAnJywgbW9kc1BhdGgpKTtcclxufVxyXG4iXX0=