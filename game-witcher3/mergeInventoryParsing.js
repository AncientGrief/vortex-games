"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNamesOfMergedMods = exports.getMergedModNames = exports.getElementValues = void 0;
const bluebird_1 = __importDefault(require("bluebird"));
const path_1 = __importDefault(require("path"));
const libxmljs_1 = require("libxmljs");
const common_1 = require("./common");
const vortex_api_1 = require("vortex-api");
function getElementValues(context, pattern) {
    const state = context.api.store.getState();
    const discovery = vortex_api_1.util.getSafe(state, ['settings', 'gameMode', 'discovered', common_1.GAME_ID], undefined);
    const scriptMerger = vortex_api_1.util.getSafe(discovery, ['tools', common_1.SCRIPT_MERGER_ID], undefined);
    if ((scriptMerger === undefined) || (scriptMerger.path === undefined)) {
        return bluebird_1.default.resolve([]);
    }
    const modsPath = path_1.default.join(discovery.path, 'Mods');
    return vortex_api_1.fs.readFileAsync(path_1.default.join(path_1.default.dirname(scriptMerger.path), common_1.MERGE_INV_MANIFEST))
        .then(xmlData => {
        try {
            const mergeData = (0, libxmljs_1.parseXmlString)(xmlData);
            const elements = mergeData.find(pattern)
                .map(modEntry => {
                try {
                    return modEntry.text();
                }
                catch (err) {
                    return undefined;
                }
            })
                .filter(entry => !!entry);
            const unique = new Set(elements);
            return bluebird_1.default.reduce(Array.from(unique), (accum, mod) => vortex_api_1.fs.statAsync(path_1.default.join(modsPath, mod))
                .then(() => {
                accum.push(mod);
                return accum;
            }).catch(err => accum), []);
        }
        catch (err) {
            return Promise.reject(err);
        }
    })
        .catch(err => (err.code === 'ENOENT')
        ? Promise.resolve([])
        : Promise.reject(new vortex_api_1.util.DataInvalid(`Failed to parse ${common_1.MERGE_INV_MANIFEST}: ${err}`)));
}
exports.getElementValues = getElementValues;
function getMergedModNames(context) {
    return getElementValues(context, '//MergedModName')
        .catch(err => {
        context.api.showErrorNotification('Invalid MergeInventory.xml file', err, { allowReport: false });
        return Promise.resolve([]);
    });
}
exports.getMergedModNames = getMergedModNames;
function getNamesOfMergedMods(context) {
    return getElementValues(context, '//IncludedMod');
}
exports.getNamesOfMergedMods = getNamesOfMergedMods;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2VJbnZlbnRvcnlQYXJzaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWVyZ2VJbnZlbnRvcnlQYXJzaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHdEQUFnQztBQUNoQyxnREFBdUI7QUFDdkIsdUNBQW1EO0FBRW5ELHFDQUF5RTtBQUV6RSwyQ0FBNkM7QUFFN0MsU0FBZ0IsZ0JBQWdCLENBQUMsT0FBZ0MsRUFBRSxPQUFlO0lBR2hGLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNDLE1BQU0sU0FBUyxHQUFHLGlCQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLGdCQUFPLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNsRyxNQUFNLFlBQVksR0FBRyxpQkFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFPLEVBQUUseUJBQWdCLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNyRixJQUFJLENBQUMsWUFBWSxLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsRUFBRTtRQUNyRSxPQUFPLGtCQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzdCO0lBRUQsTUFBTSxRQUFRLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25ELE9BQU8sZUFBRSxDQUFDLGFBQWEsQ0FBQyxjQUFJLENBQUMsSUFBSSxDQUFDLGNBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLDJCQUFrQixDQUFDLENBQUM7U0FDcEYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ2QsSUFBSTtZQUNGLE1BQU0sU0FBUyxHQUFHLElBQUEseUJBQWMsRUFBQyxPQUFPLENBQUMsQ0FBQztZQUMxQyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFVLE9BQU8sQ0FBQztpQkFDOUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNkLElBQUk7b0JBQ0YsT0FBTyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7aUJBQ3hCO2dCQUFDLE9BQU8sR0FBRyxFQUFFO29CQUNaLE9BQU8sU0FBUyxDQUFDO2lCQUNsQjtZQUNILENBQUMsQ0FBQztpQkFDRCxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFakMsT0FBTyxrQkFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBZSxFQUFFLEdBQVcsRUFBRSxFQUFFLENBQzFFLGVBQUUsQ0FBQyxTQUFTLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7aUJBQ3JDLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ1QsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDaEIsT0FBTyxLQUFLLENBQUM7WUFDZixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUMvQjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzVCO0lBQ0gsQ0FBQyxDQUFDO1NBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQztRQUNuQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDckIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxpQkFBSSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsMkJBQWtCLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0YsQ0FBQztBQXZDRCw0Q0F1Q0M7QUFFRCxTQUFnQixpQkFBaUIsQ0FBQyxPQUFnQztJQUdoRSxPQUFPLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQztTQUNoRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFLWCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFDdEUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMxQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0IsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBYkQsOENBYUM7QUFFRCxTQUFnQixvQkFBb0IsQ0FBQyxPQUFnQztJQUVuRSxPQUFPLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBSEQsb0RBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmx1ZWJpcmQgZnJvbSAnYmx1ZWJpcmQnO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xyXG5pbXBvcnQgeyBFbGVtZW50LCBwYXJzZVhtbFN0cmluZyB9IGZyb20gJ2xpYnhtbGpzJztcclxuXHJcbmltcG9ydCB7IEdBTUVfSUQsIFNDUklQVF9NRVJHRVJfSUQsIE1FUkdFX0lOVl9NQU5JRkVTVCB9IGZyb20gJy4vY29tbW9uJztcclxuXHJcbmltcG9ydCB7IGZzLCB0eXBlcywgdXRpbCB9IGZyb20gJ3ZvcnRleC1hcGknO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRWYWx1ZXMoY29udGV4dDogdHlwZXMuSUV4dGVuc2lvbkNvbnRleHQsIHBhdHRlcm46IHN0cmluZyk6IEJsdWViaXJkPHN0cmluZ1tdPiB7XHJcbiAgLy8gUHJvdmlkZWQgd2l0aCBhIHBhdHRlcm4sIGF0dGVtcHRzIHRvIHJldHJpZXZlIGVsZW1lbnQgdmFsdWVzXHJcbiAgLy8gIGZyb20gYW55IGVsZW1lbnQga2V5cyB0aGF0IG1hdGNoIHRoZSBwYXR0ZXJuIGluc2lkZSB0aGUgbWVyZ2UgaW52ZW50b3J5IGZpbGUuXHJcbiAgY29uc3Qgc3RhdGUgPSBjb250ZXh0LmFwaS5zdG9yZS5nZXRTdGF0ZSgpO1xyXG4gIGNvbnN0IGRpc2NvdmVyeSA9IHV0aWwuZ2V0U2FmZShzdGF0ZSwgWydzZXR0aW5ncycsICdnYW1lTW9kZScsICdkaXNjb3ZlcmVkJywgR0FNRV9JRF0sIHVuZGVmaW5lZCk7XHJcbiAgY29uc3Qgc2NyaXB0TWVyZ2VyID0gdXRpbC5nZXRTYWZlKGRpc2NvdmVyeSwgWyd0b29scycsIFNDUklQVF9NRVJHRVJfSURdLCB1bmRlZmluZWQpO1xyXG4gIGlmICgoc2NyaXB0TWVyZ2VyID09PSB1bmRlZmluZWQpIHx8IChzY3JpcHRNZXJnZXIucGF0aCA9PT0gdW5kZWZpbmVkKSkge1xyXG4gICAgcmV0dXJuIEJsdWViaXJkLnJlc29sdmUoW10pO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgbW9kc1BhdGggPSBwYXRoLmpvaW4oZGlzY292ZXJ5LnBhdGgsICdNb2RzJyk7XHJcbiAgcmV0dXJuIGZzLnJlYWRGaWxlQXN5bmMocGF0aC5qb2luKHBhdGguZGlybmFtZShzY3JpcHRNZXJnZXIucGF0aCksIE1FUkdFX0lOVl9NQU5JRkVTVCkpXHJcbiAgICAudGhlbih4bWxEYXRhID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBtZXJnZURhdGEgPSBwYXJzZVhtbFN0cmluZyh4bWxEYXRhKTtcclxuICAgICAgICBjb25zdCBlbGVtZW50cyA9IG1lcmdlRGF0YS5maW5kPEVsZW1lbnQ+KHBhdHRlcm4pXHJcbiAgICAgICAgICAubWFwKG1vZEVudHJ5ID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICByZXR1cm4gbW9kRW50cnkudGV4dCgpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmZpbHRlcihlbnRyeSA9PiAhIWVudHJ5KTtcclxuICAgICAgICBjb25zdCB1bmlxdWUgPSBuZXcgU2V0KGVsZW1lbnRzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIEJsdWViaXJkLnJlZHVjZShBcnJheS5mcm9tKHVuaXF1ZSksIChhY2N1bTogc3RyaW5nW10sIG1vZDogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgZnMuc3RhdEFzeW5jKHBhdGguam9pbihtb2RzUGF0aCwgbW9kKSlcclxuICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgYWNjdW0ucHVzaChtb2QpO1xyXG4gICAgICAgICAgICByZXR1cm4gYWNjdW07XHJcbiAgICAgICAgICB9KS5jYXRjaChlcnIgPT4gYWNjdW0pLCBbXSk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGVyciA9PiAoZXJyLmNvZGUgPT09ICdFTk9FTlQnKSAvLyBObyBtZXJnZSBmaWxlPyAtIG5vIHByb2JsZW0uXHJcbiAgICAgID8gUHJvbWlzZS5yZXNvbHZlKFtdKVxyXG4gICAgICA6IFByb21pc2UucmVqZWN0KG5ldyB1dGlsLkRhdGFJbnZhbGlkKGBGYWlsZWQgdG8gcGFyc2UgJHtNRVJHRV9JTlZfTUFOSUZFU1R9OiAke2Vycn1gKSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVyZ2VkTW9kTmFtZXMoY29udGV4dDogdHlwZXMuSUV4dGVuc2lvbkNvbnRleHQpIHtcclxuICAvLyBUaGlzIHJldHJpZXZlcyB0aGUgbmFtZSBvZiB0aGUgcmVzdWx0aW5nIG1lcmdlZCBtb2QgaXRzZWxmLlxyXG4gIC8vICBBS0EgXCJtb2QwMDAwX01lcmdlZEZpbGVzXCJcclxuICByZXR1cm4gZ2V0RWxlbWVudFZhbHVlcyhjb250ZXh0LCAnLy9NZXJnZWRNb2ROYW1lJylcclxuICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAvLyBXZSBmYWlsZWQgdG8gcGFyc2UgdGhlIG1lcmdlIGludmVudG9yeSBmb3Igd2hhdGV2ZXIgcmVhc29uLlxyXG4gICAgICAvLyAgUmF0aGVyIHRoYW4gYmxvY2tpbmcgdGhlIHVzZXIgZnJvbSBtb2RkaW5nIGhpcyBnYW1lIHdlJ3JlXHJcbiAgICAgIC8vICB3ZSBzaW1wbHkgcmV0dXJuIGFuIGVtcHR5IGFycmF5OyBidXQgYmVmb3JlIHdlIGRvIHRoYXQsXHJcbiAgICAgIC8vICB3ZSBuZWVkIHRvIHRlbGwgaGltIHdlIHdlcmUgdW5hYmxlIHRvIHBhcnNlIHRoZSBtZXJnZWQgaW52ZW50b3J5LlxyXG4gICAgICBjb250ZXh0LmFwaS5zaG93RXJyb3JOb3RpZmljYXRpb24oJ0ludmFsaWQgTWVyZ2VJbnZlbnRvcnkueG1sIGZpbGUnLCBlcnIsXHJcbiAgICAgICAgeyBhbGxvd1JlcG9ydDogZmFsc2UgfSk7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lc09mTWVyZ2VkTW9kcyhjb250ZXh0OiB0eXBlcy5JRXh0ZW5zaW9uQ29udGV4dCk6IEJsdWViaXJkPHN0cmluZ1tdPiB7XHJcbiAgLy8gVGhpcyByZXRyaWV2ZXMgYSB1bmlxdWUgbGlzdCBvZiBtb2QgbmFtZXMgaW5jbHVkZWQgaW4gdGhlIG1lcmdlZCBtb2RcclxuICByZXR1cm4gZ2V0RWxlbWVudFZhbHVlcyhjb250ZXh0LCAnLy9JbmNsdWRlZE1vZCcpO1xyXG59Il19