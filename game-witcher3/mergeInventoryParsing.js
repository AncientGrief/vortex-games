"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNamesOfMergedMods = exports.getMergedModNames = exports.getElementValues = void 0;
const bluebird_1 = __importDefault(require("bluebird"));
const path_1 = __importDefault(require("path"));
const libxmljs_1 = require("libxmljs");
const common_1 = require("./common");
const vortex_api_1 = require("vortex-api");
function getElementValues(context, pattern) {
    const state = context.api.store.getState();
    const discovery = vortex_api_1.util.getSafe(state, ['settings', 'gameMode', 'discovered', common_1.GAME_ID], undefined);
    const scriptMerger = vortex_api_1.util.getSafe(discovery, ['tools', common_1.SCRIPT_MERGER_ID], undefined);
    if ((scriptMerger === undefined) || (scriptMerger.path === undefined)) {
        return bluebird_1.default.resolve([]);
    }
    const modsPath = path_1.default.join(discovery.path, 'Mods');
    return vortex_api_1.fs.readFileAsync(path_1.default.join(path_1.default.dirname(scriptMerger.path), common_1.MERGE_INV_MANIFEST))
        .then(xmlData => {
        try {
            const mergeData = libxmljs_1.parseXmlString(xmlData);
            const elements = mergeData.find(pattern)
                .map(modEntry => {
                try {
                    return modEntry.text();
                }
                catch (err) {
                    return undefined;
                }
            })
                .filter(entry => !!entry);
            const unique = new Set(elements);
            return bluebird_1.default.reduce(Array.from(unique), (accum, mod) => vortex_api_1.fs.statAsync(path_1.default.join(modsPath, mod))
                .then(() => {
                accum.push(mod);
                return accum;
            }).catch(err => accum), []);
        }
        catch (err) {
            return Promise.reject(err);
        }
    })
        .catch(err => (err.code === 'ENOENT')
        ? Promise.resolve([])
        : Promise.reject(new vortex_api_1.util.DataInvalid(`Failed to parse ${common_1.MERGE_INV_MANIFEST}: ${err}`)));
}
exports.getElementValues = getElementValues;
function getMergedModNames(context) {
    return getElementValues(context, '//MergedModName')
        .catch(err => {
        context.api.showErrorNotification('Invalid MergeInventory.xml file', err, { allowReport: false });
        return Promise.resolve([]);
    });
}
exports.getMergedModNames = getMergedModNames;
function getNamesOfMergedMods(context) {
    return getElementValues(context, '//IncludedMod');
}
exports.getNamesOfMergedMods = getNamesOfMergedMods;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2VJbnZlbnRvcnlQYXJzaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWVyZ2VJbnZlbnRvcnlQYXJzaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHdEQUFnQztBQUNoQyxnREFBdUI7QUFDdkIsdUNBQW1EO0FBRW5ELHFDQUF5RTtBQUV6RSwyQ0FBNkM7QUFFN0MsU0FBZ0IsZ0JBQWdCLENBQUMsT0FBZ0MsRUFBRSxPQUFlO0lBR2hGLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNDLE1BQU0sU0FBUyxHQUFHLGlCQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLGdCQUFPLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNsRyxNQUFNLFlBQVksR0FBRyxpQkFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFPLEVBQUUseUJBQWdCLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNyRixJQUFJLENBQUMsWUFBWSxLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsRUFBRTtRQUNyRSxPQUFPLGtCQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzdCO0lBRUQsTUFBTSxRQUFRLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25ELE9BQU8sZUFBRSxDQUFDLGFBQWEsQ0FBQyxjQUFJLENBQUMsSUFBSSxDQUFDLGNBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLDJCQUFrQixDQUFDLENBQUM7U0FDcEYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ2QsSUFBSTtZQUNGLE1BQU0sU0FBUyxHQUFHLHlCQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBVSxPQUFPLENBQUM7aUJBQzlDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDZCxJQUFJO29CQUNGLE9BQU8sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO2lCQUN4QjtnQkFBQyxPQUFPLEdBQUcsRUFBRTtvQkFDWixPQUFPLFNBQVMsQ0FBQztpQkFDbEI7WUFDSCxDQUFDLENBQUM7aUJBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVCLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRWpDLE9BQU8sa0JBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQWUsRUFBRSxHQUFXLEVBQUUsRUFBRSxDQUMxRSxlQUFFLENBQUMsU0FBUyxDQUFDLGNBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2lCQUNyQyxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNULEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2hCLE9BQU8sS0FBSyxDQUFDO1lBQ2YsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDL0I7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM1QjtJQUNILENBQUMsQ0FBQztTQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7UUFDbkMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksaUJBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLDJCQUFrQixLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9GLENBQUM7QUF2Q0QsNENBdUNDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUMsT0FBZ0M7SUFHaEUsT0FBTyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsaUJBQWlCLENBQUM7U0FDaEQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBS1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQ3RFLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDMUIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQWJELDhDQWFDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUMsT0FBZ0M7SUFFbkUsT0FBTyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQUhELG9EQUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJsdWViaXJkIGZyb20gJ2JsdWViaXJkJztcclxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcclxuaW1wb3J0IHsgRWxlbWVudCwgcGFyc2VYbWxTdHJpbmcgfSBmcm9tICdsaWJ4bWxqcyc7XHJcblxyXG5pbXBvcnQgeyBHQU1FX0lELCBTQ1JJUFRfTUVSR0VSX0lELCBNRVJHRV9JTlZfTUFOSUZFU1QgfSBmcm9tICcuL2NvbW1vbic7XHJcblxyXG5pbXBvcnQgeyBmcywgdHlwZXMsIHV0aWwgfSBmcm9tICd2b3J0ZXgtYXBpJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50VmFsdWVzKGNvbnRleHQ6IHR5cGVzLklFeHRlbnNpb25Db250ZXh0LCBwYXR0ZXJuOiBzdHJpbmcpOiBCbHVlYmlyZDxzdHJpbmdbXT4ge1xyXG4gIC8vIFByb3ZpZGVkIHdpdGggYSBwYXR0ZXJuLCBhdHRlbXB0cyB0byByZXRyaWV2ZSBlbGVtZW50IHZhbHVlc1xyXG4gIC8vICBmcm9tIGFueSBlbGVtZW50IGtleXMgdGhhdCBtYXRjaCB0aGUgcGF0dGVybiBpbnNpZGUgdGhlIG1lcmdlIGludmVudG9yeSBmaWxlLlxyXG4gIGNvbnN0IHN0YXRlID0gY29udGV4dC5hcGkuc3RvcmUuZ2V0U3RhdGUoKTtcclxuICBjb25zdCBkaXNjb3ZlcnkgPSB1dGlsLmdldFNhZmUoc3RhdGUsIFsnc2V0dGluZ3MnLCAnZ2FtZU1vZGUnLCAnZGlzY292ZXJlZCcsIEdBTUVfSURdLCB1bmRlZmluZWQpO1xyXG4gIGNvbnN0IHNjcmlwdE1lcmdlciA9IHV0aWwuZ2V0U2FmZShkaXNjb3ZlcnksIFsndG9vbHMnLCBTQ1JJUFRfTUVSR0VSX0lEXSwgdW5kZWZpbmVkKTtcclxuICBpZiAoKHNjcmlwdE1lcmdlciA9PT0gdW5kZWZpbmVkKSB8fCAoc2NyaXB0TWVyZ2VyLnBhdGggPT09IHVuZGVmaW5lZCkpIHtcclxuICAgIHJldHVybiBCbHVlYmlyZC5yZXNvbHZlKFtdKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IG1vZHNQYXRoID0gcGF0aC5qb2luKGRpc2NvdmVyeS5wYXRoLCAnTW9kcycpO1xyXG4gIHJldHVybiBmcy5yZWFkRmlsZUFzeW5jKHBhdGguam9pbihwYXRoLmRpcm5hbWUoc2NyaXB0TWVyZ2VyLnBhdGgpLCBNRVJHRV9JTlZfTUFOSUZFU1QpKVxyXG4gICAgLnRoZW4oeG1sRGF0YSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgbWVyZ2VEYXRhID0gcGFyc2VYbWxTdHJpbmcoeG1sRGF0YSk7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBtZXJnZURhdGEuZmluZDxFbGVtZW50PihwYXR0ZXJuKVxyXG4gICAgICAgICAgLm1hcChtb2RFbnRyeSA9PiB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG1vZEVudHJ5LnRleHQoKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5maWx0ZXIoZW50cnkgPT4gISFlbnRyeSk7XHJcbiAgICAgICAgY29uc3QgdW5pcXVlID0gbmV3IFNldChlbGVtZW50cyk7XHJcblxyXG4gICAgICAgIHJldHVybiBCbHVlYmlyZC5yZWR1Y2UoQXJyYXkuZnJvbSh1bmlxdWUpLCAoYWNjdW06IHN0cmluZ1tdLCBtb2Q6IHN0cmluZykgPT5cclxuICAgICAgICAgIGZzLnN0YXRBc3luYyhwYXRoLmpvaW4obW9kc1BhdGgsIG1vZCkpXHJcbiAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGFjY3VtLnB1c2gobW9kKTtcclxuICAgICAgICAgICAgcmV0dXJuIGFjY3VtO1xyXG4gICAgICAgICAgfSkuY2F0Y2goZXJyID0+IGFjY3VtKSwgW10pO1xyXG4gICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIC5jYXRjaChlcnIgPT4gKGVyci5jb2RlID09PSAnRU5PRU5UJykgLy8gTm8gbWVyZ2UgZmlsZT8gLSBubyBwcm9ibGVtLlxyXG4gICAgICA/IFByb21pc2UucmVzb2x2ZShbXSlcclxuICAgICAgOiBQcm9taXNlLnJlamVjdChuZXcgdXRpbC5EYXRhSW52YWxpZChgRmFpbGVkIHRvIHBhcnNlICR7TUVSR0VfSU5WX01BTklGRVNUfTogJHtlcnJ9YCkpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE1lcmdlZE1vZE5hbWVzKGNvbnRleHQ6IHR5cGVzLklFeHRlbnNpb25Db250ZXh0KSB7XHJcbiAgLy8gVGhpcyByZXRyaWV2ZXMgdGhlIG5hbWUgb2YgdGhlIHJlc3VsdGluZyBtZXJnZWQgbW9kIGl0c2VsZi5cclxuICAvLyAgQUtBIFwibW9kMDAwMF9NZXJnZWRGaWxlc1wiXHJcbiAgcmV0dXJuIGdldEVsZW1lbnRWYWx1ZXMoY29udGV4dCwgJy8vTWVyZ2VkTW9kTmFtZScpXHJcbiAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgLy8gV2UgZmFpbGVkIHRvIHBhcnNlIHRoZSBtZXJnZSBpbnZlbnRvcnkgZm9yIHdoYXRldmVyIHJlYXNvbi5cclxuICAgICAgLy8gIFJhdGhlciB0aGFuIGJsb2NraW5nIHRoZSB1c2VyIGZyb20gbW9kZGluZyBoaXMgZ2FtZSB3ZSdyZVxyXG4gICAgICAvLyAgd2Ugc2ltcGx5IHJldHVybiBhbiBlbXB0eSBhcnJheTsgYnV0IGJlZm9yZSB3ZSBkbyB0aGF0LFxyXG4gICAgICAvLyAgd2UgbmVlZCB0byB0ZWxsIGhpbSB3ZSB3ZXJlIHVuYWJsZSB0byBwYXJzZSB0aGUgbWVyZ2VkIGludmVudG9yeS5cclxuICAgICAgY29udGV4dC5hcGkuc2hvd0Vycm9yTm90aWZpY2F0aW9uKCdJbnZhbGlkIE1lcmdlSW52ZW50b3J5LnhtbCBmaWxlJywgZXJyLFxyXG4gICAgICAgIHsgYWxsb3dSZXBvcnQ6IGZhbHNlIH0pO1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmFtZXNPZk1lcmdlZE1vZHMoY29udGV4dDogdHlwZXMuSUV4dGVuc2lvbkNvbnRleHQpOiBCbHVlYmlyZDxzdHJpbmdbXT4ge1xyXG4gIC8vIFRoaXMgcmV0cmlldmVzIGEgdW5pcXVlIGxpc3Qgb2YgbW9kIG5hbWVzIGluY2x1ZGVkIGluIHRoZSBtZXJnZWQgbW9kXHJcbiAgcmV0dXJuIGdldEVsZW1lbnRWYWx1ZXMoY29udGV4dCwgJy8vSW5jbHVkZWRNb2QnKTtcclxufSJdfQ==