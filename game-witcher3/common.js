"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DO_NOT_DEPLOY = exports.DO_NOT_DISPLAY = exports.LOCKED_PREFIX = exports.UNI_PATCH = exports.W3_TEMP_DATA_DIR = exports.CONFIG_MATRIX_REL_PATH = exports.I18N_NAMESPACE = exports.LOAD_ORDER_FILENAME = exports.MERGE_INV_MANIFEST = exports.SCRIPT_MERGER_ID = exports.PART_SUFFIX = exports.INPUT_XML_FILENAME = exports.GAME_ID = exports.getPriorityTypeBranch = exports.getLoadOrderFilePath = exports.UNIAPP = exports.getHash = exports.calcHashImpl = exports.MergeDataViolationError = exports.ResourceInaccessibleError = exports.MD5ComparisonError = void 0;
const crypto_1 = __importDefault(require("crypto"));
const electron_1 = require("electron");
const path_1 = __importDefault(require("path"));
const vortex_api_1 = require("vortex-api");
class MD5ComparisonError extends Error {
    constructor(message, file) {
        super(message);
        this.mPath = file;
    }
    get affectedFile() {
        return this.mPath;
    }
    get errorMessage() {
        return this.message + ': ' + this.mPath;
    }
}
exports.MD5ComparisonError = MD5ComparisonError;
class ResourceInaccessibleError extends Error {
    constructor(filePath, allowReport = false) {
        super(`"${filePath}" is being manipulated by another process`);
        this.mFilePath = filePath;
        this.mIsReportingAllowed = allowReport;
    }
    get isOneDrive() {
        const segments = this.mFilePath.split(path_1.default.sep)
            .filter(seg => !!seg)
            .map(seg => seg.toLowerCase());
        return segments.includes('onedrive');
    }
    get allowReport() {
        return this.mIsReportingAllowed;
    }
    get errorMessage() {
        return (this.isOneDrive)
            ? this.message + ': ' + 'probably by the OneDrive service.'
            : this.message + ': ' + 'close all applications that may be using this file.';
    }
}
exports.ResourceInaccessibleError = ResourceInaccessibleError;
class MergeDataViolationError extends Error {
    constructor(notIncluded, optional, collectionName) {
        super(`Merged script data for ${collectionName} is referencing missing/undeployed/optional mods`);
        this.name = 'MergeDataViolationError';
        this.mOptional = optional;
        this.mNotIncluded = notIncluded;
        this.mCollectionName = collectionName;
    }
    get Optional() {
        return this.mOptional;
    }
    get NotIncluded() {
        return this.mNotIncluded;
    }
    get CollectionName() {
        return this.mCollectionName;
    }
}
exports.MergeDataViolationError = MergeDataViolationError;
function calcHashImpl(filePath) {
    return new Promise((resolve, reject) => {
        const hash = crypto_1.default.createHash('md5');
        const stream = vortex_api_1.fs.createReadStream(filePath);
        stream.on('readable', () => {
            const data = stream.read();
            if (data) {
                hash.update(data);
            }
        });
        stream.on('end', () => resolve(hash.digest('hex')));
        stream.on('error', reject);
    });
}
exports.calcHashImpl = calcHashImpl;
function getHash(filePath, tries = 3) {
    return calcHashImpl(filePath)
        .catch(err => {
        if (['EMFILE', 'EBADF'].includes(err['code']) && (tries > 0)) {
            return getHash(filePath, tries - 1);
        }
        else {
            return Promise.reject(err);
        }
    });
}
exports.getHash = getHash;
exports.UNIAPP = electron_1.app || electron_1.remote.app;
function getLoadOrderFilePath() {
    return path_1.default.join(exports.UNIAPP.getPath('documents'), 'The Witcher 3', exports.LOAD_ORDER_FILENAME);
}
exports.getLoadOrderFilePath = getLoadOrderFilePath;
function getPriorityTypeBranch() {
    return ['settings', 'witcher3', 'prioritytype'];
}
exports.getPriorityTypeBranch = getPriorityTypeBranch;
exports.GAME_ID = 'witcher3';
exports.INPUT_XML_FILENAME = 'input.xml';
exports.PART_SUFFIX = '.part.txt';
exports.SCRIPT_MERGER_ID = 'W3ScriptMerger';
exports.MERGE_INV_MANIFEST = 'MergeInventory.xml';
exports.LOAD_ORDER_FILENAME = 'mods.settings';
exports.I18N_NAMESPACE = 'game-witcher3';
exports.CONFIG_MATRIX_REL_PATH = path_1.default.join('bin', 'config', 'r4game', 'user_config_matrix', 'pc');
exports.W3_TEMP_DATA_DIR = path_1.default.join(vortex_api_1.util.getVortexPath('temp'), 'W3TempData');
exports.UNI_PATCH = 'mod0000____CompilationTrigger';
exports.LOCKED_PREFIX = 'mod0000_';
exports.DO_NOT_DISPLAY = ['communitypatch-base'];
exports.DO_NOT_DEPLOY = ['readme.txt'];
//# sourceMappingURL=data:application/json;base64,