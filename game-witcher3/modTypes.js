"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testDLC = exports.testTL = void 0;
const common_1 = require("./common");
const path_1 = __importDefault(require("path"));
const destHasRootDir = (instruction, dir) => {
    if (!(instruction === null || instruction === void 0 ? void 0 : instruction.destination)) {
        return false;
    }
    const segments = instruction.destination.split(path_1.default.sep);
    return segments[0].toLowerCase() === dir.toLowerCase();
};
function testTL(instructions) {
    const menuModFiles = instructions.filter(instr => !!instr.destination
        && instr.destination.indexOf(common_1.CONFIG_MATRIX_REL_PATH) !== -1);
    if (menuModFiles.length > 0) {
        return Promise.resolve(false);
    }
    const hasModsDir = instructions.some(instr => destHasRootDir(instr, 'mods'));
    const hasBinDir = instructions.some(instr => destHasRootDir(instr, 'bin'));
    return Promise.resolve(hasModsDir || hasBinDir);
}
exports.testTL = testTL;
function testDLC(instructions) {
    return Promise.resolve(instructions.find(instruction => !!instruction.destination && instruction.destination.toLowerCase().startsWith('dlc' + path_1.default.sep)) !== undefined);
}
exports.testDLC = testDLC;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kVHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtb2RUeXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxQ0FBa0Q7QUFDbEQsZ0RBQXdCO0FBR3hCLE1BQU0sY0FBYyxHQUFHLENBQUMsV0FBK0IsRUFBRSxHQUFXLEVBQUUsRUFBRTtJQUN0RSxJQUFJLENBQUMsQ0FBQSxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUUsV0FBVyxDQUFBLEVBQUU7UUFDN0IsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLGNBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6RCxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDekQsQ0FBQyxDQUFBO0FBRUQsU0FBZ0IsTUFBTSxDQUFDLFlBQWtDO0lBQ3ZELE1BQU0sWUFBWSxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVc7V0FDaEUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsK0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9ELElBQUksWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDM0IsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQy9CO0lBRUQsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUM3RSxNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzNFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksU0FBUyxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQVZELHdCQVVDO0FBRUQsU0FBZ0IsT0FBTyxDQUFDLFlBQWtDO0lBQ3hELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUN0QyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxJQUFJLFdBQVcsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxjQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQztBQUNuSSxDQUFDO0FBSEQsMEJBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDT05GSUdfTUFUUklYX1JFTF9QQVRIIH0gZnJvbSAnLi9jb21tb24nO1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcclxuaW1wb3J0IHsgdHlwZXMgfSBmcm9tICd2b3J0ZXgtYXBpJztcclxuXHJcbmNvbnN0IGRlc3RIYXNSb290RGlyID0gKGluc3RydWN0aW9uOiB0eXBlcy5JSW5zdHJ1Y3Rpb24sIGRpcjogc3RyaW5nKSA9PiB7XHJcbiAgaWYgKCFpbnN0cnVjdGlvbj8uZGVzdGluYXRpb24pIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgY29uc3Qgc2VnbWVudHMgPSBpbnN0cnVjdGlvbi5kZXN0aW5hdGlvbi5zcGxpdChwYXRoLnNlcCk7XHJcbiAgcmV0dXJuIHNlZ21lbnRzWzBdLnRvTG93ZXJDYXNlKCkgPT09IGRpci50b0xvd2VyQ2FzZSgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGVzdFRMKGluc3RydWN0aW9uczogdHlwZXMuSUluc3RydWN0aW9uW10pIHtcclxuICBjb25zdCBtZW51TW9kRmlsZXMgPSBpbnN0cnVjdGlvbnMuZmlsdGVyKGluc3RyID0+ICEhaW5zdHIuZGVzdGluYXRpb25cclxuICAgICYmIGluc3RyLmRlc3RpbmF0aW9uLmluZGV4T2YoQ09ORklHX01BVFJJWF9SRUxfUEFUSCkgIT09IC0xKTtcclxuICBpZiAobWVudU1vZEZpbGVzLmxlbmd0aCA+IDApIHtcclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgaGFzTW9kc0RpciA9IGluc3RydWN0aW9ucy5zb21lKGluc3RyID0+IGRlc3RIYXNSb290RGlyKGluc3RyLCAnbW9kcycpKTtcclxuICBjb25zdCBoYXNCaW5EaXIgPSBpbnN0cnVjdGlvbnMuc29tZShpbnN0ciA9PiBkZXN0SGFzUm9vdERpcihpbnN0ciwgJ2JpbicpKTtcclxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGhhc01vZHNEaXIgfHwgaGFzQmluRGlyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRlc3RETEMoaW5zdHJ1Y3Rpb25zOiB0eXBlcy5JSW5zdHJ1Y3Rpb25bXSkge1xyXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoaW5zdHJ1Y3Rpb25zLmZpbmQoXHJcbiAgICBpbnN0cnVjdGlvbiA9PiAhIWluc3RydWN0aW9uLmRlc3RpbmF0aW9uICYmIGluc3RydWN0aW9uLmRlc3RpbmF0aW9uLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCgnZGxjJyArIHBhdGguc2VwKSkgIT09IHVuZGVmaW5lZCk7XHJcbn0iXX0=