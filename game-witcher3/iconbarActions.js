"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerActions = void 0;
const path_1 = __importDefault(require("path"));
const vortex_api_1 = require("vortex-api");
const actions_1 = require("./actions");
const common_1 = require("./common");
function resetPriorities(props) {
    const { context, refreshFunc } = props;
    const state = context.api.getState();
    const profile = vortex_api_1.selectors.activeProfile(state);
    const loadOrder = vortex_api_1.util.getSafe(state, ['persistent', 'loadOrder', profile.id], {});
    const newLO = Object.keys(loadOrder).reduce((accum, key) => {
        const loEntry = loadOrder[key];
        accum[key] = Object.assign(Object.assign({}, loEntry), { prefix: loEntry.pos + 1 });
        return accum;
    }, {});
    context.api.store.dispatch(vortex_api_1.actions.setLoadOrder(profile.id, newLO));
    if (refreshFunc !== undefined) {
        refreshFunc();
    }
    return newLO;
}
exports.registerActions = (props) => {
    var _a;
    const { context, refreshFunc, getPriorityManager } = props;
    const openTW3DocPath = () => {
        const docPath = path_1.default.join(common_1.UNIAPP.getPath('documents'), 'The Witcher 3');
        vortex_api_1.util.opn(docPath).catch(() => null);
    };
    const isTW3 = (gameId = undefined) => {
        if (gameId !== undefined) {
            return (gameId === common_1.GAME_ID);
        }
        const state = context.api.getState();
        const gameMode = vortex_api_1.selectors.activeGameId(state);
        return (gameMode === common_1.GAME_ID);
    };
    context.registerAction('generic-load-order-icons', 300, 'save', {}, ((_a = getPriorityManager()) === null || _a === void 0 ? void 0 : _a.priorityType) === 'position-based'
        ? 'Switch to Prefix-based'
        : 'Switch to Position-based', () => {
        const priorityManager = getPriorityManager();
        if (priorityManager === undefined) {
            return;
        }
        else {
            const state = context.api.getState();
            const priorityType = vortex_api_1.util.getSafe(state, common_1.getPriorityTypeBranch(), 'prefix-based');
            const wantedType = (priorityType === 'prefix-based')
                ? 'position-based' : 'prefix-based';
            context.api.store.dispatch(actions_1.setPriorityType(wantedType));
        }
    }, isTW3);
    context.registerAction('mod-icons', 300, 'open-ext', {}, 'Open TW3 Documents Folder', openTW3DocPath, isTW3);
    context.registerAction('generic-load-order-icons', 300, 'open-ext', {}, 'Open TW3 Documents Folder', openTW3DocPath, isTW3);
    context.registerAction('generic-load-order-icons', 100, 'loot-sort', {}, 'Reset Priorities', () => {
        context.api.showDialog('info', 'Reset Priorities', {
            bbcode: context.api.translate('This action will revert all manually set priorities and will re-instate priorities in an incremental '
                + 'manner starting from 1. Are you sure you want to do this ?', { ns: common_1.I18N_NAMESPACE }),
        }, [
            { label: 'Cancel', action: () => {
                    return;
                } },
            { label: 'Reset Priorities', action: () => resetPriorities(props) },
        ]);
    }, () => {
        const state = context.api.store.getState();
        const gameMode = vortex_api_1.selectors.activeGameId(state);
        return gameMode === common_1.GAME_ID;
    });
    context.registerAction('generic-load-order-icons', 100, 'loot-sort', {}, 'Sort by Deploy Order', () => {
        context.api.showDialog('info', 'Sort by Deployment Order', {
            bbcode: context.api.translate('This action will set priorities using the deployment rules '
                + 'defined in the mods page. Are you sure you wish to proceed ?[br][/br][br][/br]'
                + 'Please be aware that any externally added mods (added manually or by other tools) will be pushed '
                + 'to the bottom of the list, while all mods that have been installed through Vortex will shift '
                + 'in position to match the deploy order!', { ns: common_1.I18N_NAMESPACE }),
        }, [
            { label: 'Cancel', action: () => {
                    return;
                } },
            { label: 'Sort by Deploy Order', action: () => {
                    const state = context.api.getState();
                    const gameMods = state.persistent.mods[common_1.GAME_ID] || {};
                    const profile = vortex_api_1.selectors.activeProfile(state);
                    const mods = Object.keys(gameMods)
                        .filter(key => vortex_api_1.util.getSafe(profile, ['modState', key, 'enabled'], false))
                        .map(key => gameMods[key]);
                    return vortex_api_1.util.sortMods(common_1.GAME_ID, mods, context.api)
                        .then(sorted => {
                        const loadOrder = vortex_api_1.util.getSafe(state, ['persistent', 'loadOrder', profile.id], {});
                        const filtered = Object.keys(loadOrder).filter(key => sorted.find(mod => mod.id === key) !== undefined);
                        const manuallyAdded = Object.keys(loadOrder).filter(key => !filtered.includes(key));
                        const minimumIdx = manuallyAdded
                            .filter(key => key.includes(common_1.LOCKED_PREFIX))
                            .reduce((min, key) => {
                            if (min <= loadOrder[key].pos) {
                                min = loadOrder[key].pos + 1;
                            }
                            return min;
                        }, 0);
                        const manualLO = manuallyAdded.reduce((accum, key, idx) => {
                            if (key.includes(common_1.LOCKED_PREFIX)) {
                                accum[key] = loadOrder[key];
                                return accum;
                            }
                            const minimumPosition = (filtered.length + minimumIdx + 1);
                            if (loadOrder[key].pos < minimumPosition) {
                                accum[key] = Object.assign(Object.assign({}, loadOrder[key]), { pos: loadOrder[key].pos + (minimumPosition + idx), prefix: loadOrder[key].pos + (minimumPosition + idx + 1) });
                                return accum;
                            }
                            else {
                                accum[key] = loadOrder[key];
                                return accum;
                            }
                        }, {});
                        const newLO = filtered.reduce((accum, key) => {
                            const loEntry = loadOrder[key];
                            const idx = sorted.findIndex(mod => mod.id === key);
                            const assignedIdx = minimumIdx + idx;
                            accum[key] = Object.assign(Object.assign({}, loEntry), { pos: assignedIdx, prefix: assignedIdx + 1 });
                            return accum;
                        }, manualLO);
                        context.api.store.dispatch(vortex_api_1.actions.setLoadOrder(profile.id, newLO));
                        if (refreshFunc !== undefined) {
                            refreshFunc();
                        }
                    })
                        .catch(err => {
                        const allowReport = !(err instanceof vortex_api_1.util.CycleError);
                        context.api.showErrorNotification('Failed to sort by deployment order', err, { allowReport });
                    });
                } },
        ]);
    }, () => {
        const state = context.api.store.getState();
        const gameMode = vortex_api_1.selectors.activeGameId(state);
        return gameMode === common_1.GAME_ID;
    });
};
//# sourceMappingURL=data:application/json;base64,