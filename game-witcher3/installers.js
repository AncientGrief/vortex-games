"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installMixed = exports.testSupportedMixed = void 0;
const path_1 = __importDefault(require("path"));
const common_1 = require("./common");
function testSupportedMixed(files, gameId) {
    if (gameId !== common_1.GAME_ID) {
        return Promise.resolve({ supported: false, requiredFiles: [] });
    }
    const hasConfigMatrixFile = files.find(file => path_1.default.basename(file).toLowerCase() === common_1.CONFIG_MATRIX_REL_PATH) !== undefined;
    if (hasConfigMatrixFile) {
        return Promise.resolve({ supported: false, requiredFiles: [] });
    }
    const hasPrefix = (prefix, fileEntry) => {
        const segments = fileEntry.toLowerCase().split(path_1.default.sep);
        if (segments.indexOf('content') !== 1) {
            return false;
        }
        return (segments[0].length > 3) && (segments[0].startsWith(prefix));
    };
    const supported = ((files.find(file => hasPrefix('dlc', file)) !== undefined)
        && (files.find(file => hasPrefix('mod', file)) !== undefined));
    return Promise.resolve({
        supported,
        requiredFiles: [],
    });
}
exports.testSupportedMixed = testSupportedMixed;
function installMixed(files) {
    const modNames = [];
    const instructions = files.reduce((accum, iter) => {
        const segments = iter.split(path_1.default.sep);
        if (!path_1.default.extname(segments[segments.length - 1])) {
            return accum;
        }
        const modName = segments[0].startsWith('mod')
            ? segments[0] : undefined;
        const destination = (segments[0].startsWith('dlc'))
            ? ['dlc'].concat(segments).join(path_1.default.sep)
            : (modName !== undefined)
                ? ['mods'].concat(segments).join(path_1.default.sep)
                : undefined;
        if (destination !== undefined) {
            if (modName !== undefined) {
                modNames.push(modName);
            }
            const instruction = {
                type: 'copy',
                source: iter,
                destination,
            };
            accum.push(instruction);
        }
        return accum;
    }, [])
        .concat({
        type: 'attribute',
        key: 'modComponents',
        value: modNames,
    });
    return Promise.resolve({ instructions });
}
exports.installMixed = installMixed;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFsbGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluc3RhbGxlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBRXhCLHFDQUEyRDtBQUkzRCxTQUFnQixrQkFBa0IsQ0FBQyxLQUFlLEVBQ2YsTUFBYztJQUMvQyxJQUFJLE1BQU0sS0FBSyxnQkFBTyxFQUFFO1FBQ3RCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDakU7SUFFRCxNQUFNLG1CQUFtQixHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDNUMsY0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsS0FBSywrQkFBc0IsQ0FBQyxLQUFLLFNBQVMsQ0FBQztJQUM5RSxJQUFJLG1CQUFtQixFQUFFO1FBQ3ZCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDakU7SUFFRCxNQUFNLFNBQVMsR0FBRyxDQUFDLE1BQWtCLEVBQUUsU0FBaUIsRUFBRSxFQUFFO1FBQzFELE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsY0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pELElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFJckMsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3RFLENBQUMsQ0FBQztJQUVGLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQztXQUMxRCxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztJQUMvRSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDckIsU0FBUztRQUNULGFBQWEsRUFBRSxFQUFFO0tBQ2xCLENBQUMsQ0FBQztBQUNMLENBQUM7QUE5QkQsZ0RBOEJDO0FBRUQsU0FBZ0IsWUFBWSxDQUFDLEtBQWU7SUFHMUMsTUFBTSxRQUFRLEdBQWEsRUFBRSxDQUFDO0lBQzlCLE1BQU0sWUFBWSxHQUF5QixLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQ3RFLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxjQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDaEQsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO1lBQzNDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUM1QixNQUFNLFdBQVcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDakQsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFJLENBQUMsR0FBRyxDQUFDO1lBQ3pDLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxTQUFTLENBQUM7Z0JBQ3ZCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBSSxDQUFDLEdBQUcsQ0FBQztnQkFDMUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNoQixJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDN0IsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO2dCQUN6QixRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3hCO1lBQ0QsTUFBTSxXQUFXLEdBQXVCO2dCQUN0QyxJQUFJLEVBQUUsTUFBTTtnQkFDWixNQUFNLEVBQUUsSUFBSTtnQkFDWixXQUFXO2FBQ1osQ0FBQztZQUNGLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDekI7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsRUFBRSxFQUFFLENBQUM7U0FDTCxNQUFNLENBQUM7UUFDTixJQUFJLEVBQUUsV0FBVztRQUNqQixHQUFHLEVBQUUsZUFBZTtRQUNwQixLQUFLLEVBQUUsUUFBUTtLQUNoQixDQUFDLENBQUM7SUFDSCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO0FBQzNDLENBQUM7QUFuQ0Qsb0NBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCB7IHR5cGVzIH0gZnJvbSAndm9ydGV4LWFwaSc7XHJcbmltcG9ydCB7IENPTkZJR19NQVRSSVhfUkVMX1BBVEgsIEdBTUVfSUQgfSBmcm9tICcuL2NvbW1vbic7XHJcblxyXG5leHBvcnQgdHlwZSBQcmVmaXhUeXBlID0gJ2RsYycgfCAnbW9kJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0ZXN0U3VwcG9ydGVkTWl4ZWQoZmlsZXM6IHN0cmluZ1tdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVJZDogc3RyaW5nKTogUHJvbWlzZTx0eXBlcy5JU3VwcG9ydGVkUmVzdWx0PiB7XHJcbiAgaWYgKGdhbWVJZCAhPT0gR0FNRV9JRCkge1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IHN1cHBvcnRlZDogZmFsc2UsIHJlcXVpcmVkRmlsZXM6IFtdIH0pO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgaGFzQ29uZmlnTWF0cml4RmlsZSA9IGZpbGVzLmZpbmQoZmlsZSA9PlxyXG4gICAgcGF0aC5iYXNlbmFtZShmaWxlKS50b0xvd2VyQ2FzZSgpID09PSBDT05GSUdfTUFUUklYX1JFTF9QQVRIKSAhPT0gdW5kZWZpbmVkO1xyXG4gIGlmIChoYXNDb25maWdNYXRyaXhGaWxlKSB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgc3VwcG9ydGVkOiBmYWxzZSwgcmVxdWlyZWRGaWxlczogW10gfSk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBoYXNQcmVmaXggPSAocHJlZml4OiBQcmVmaXhUeXBlLCBmaWxlRW50cnk6IHN0cmluZykgPT4ge1xyXG4gICAgY29uc3Qgc2VnbWVudHMgPSBmaWxlRW50cnkudG9Mb3dlckNhc2UoKS5zcGxpdChwYXRoLnNlcCk7XHJcbiAgICBpZiAoc2VnbWVudHMuaW5kZXhPZignY29udGVudCcpICE9PSAxKSB7XHJcbiAgICAgIC8vIFdlIGV4cGVjdCB0aGUgY29udGVudCBmb2xkZXIgdG8gYmUgbmVzdGVkIG9uZSBsZXZlbCBiZW5lYXRoXHJcbiAgICAgIC8vICB0aGUgbW9kJ3MgZm9sZGVyIGUuZy4gJ2FyY2hpdmUuemlwL2RsY01vZE5hbWUvY29udGVudC8nIG90aGVyd2lzZVxyXG4gICAgICAvLyAgaXQncyBzaW1wbHkgdG9vIHVucmVsaWFibGUgdG8gYXR0ZW1wdCB0byBkZXRlY3QgdGhpcyBwYWNrYWdpbmcgcGF0dGVybi5cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoc2VnbWVudHNbMF0ubGVuZ3RoID4gMykgJiYgKHNlZ21lbnRzWzBdLnN0YXJ0c1dpdGgocHJlZml4KSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc3VwcG9ydGVkID0gKChmaWxlcy5maW5kKGZpbGUgPT4gaGFzUHJlZml4KCdkbGMnLCBmaWxlKSkgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgJiYgKGZpbGVzLmZpbmQoZmlsZSA9PiBoYXNQcmVmaXgoJ21vZCcsIGZpbGUpKSAhPT0gdW5kZWZpbmVkKSk7XHJcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XHJcbiAgICBzdXBwb3J0ZWQsXHJcbiAgICByZXF1aXJlZEZpbGVzOiBbXSxcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGxNaXhlZChmaWxlczogc3RyaW5nW10pIHtcclxuICAvLyBXZSBjYW4gb25seSBhc3N1bWUgdGhhdCBmaWxlcyB3aXRoIHRoZSAnZGxjJyBwcmVmaXggZ28gaW5zaWRlIGRsYyBhbmQgZmlsZXNcclxuICAvLyAgd2l0aCB0aGUgJ21vZCcgcHJlZml4IGdvIGluc2lkZSBtb2RzLlxyXG4gIGNvbnN0IG1vZE5hbWVzOiBzdHJpbmdbXSA9IFtdO1xyXG4gIGNvbnN0IGluc3RydWN0aW9uczogdHlwZXMuSUluc3RydWN0aW9uW10gPSBmaWxlcy5yZWR1Y2UoKGFjY3VtLCBpdGVyKSA9PiB7XHJcbiAgICBjb25zdCBzZWdtZW50cyA9IGl0ZXIuc3BsaXQocGF0aC5zZXApO1xyXG4gICAgaWYgKCFwYXRoLmV4dG5hbWUoc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0gMV0pKSB7XHJcbiAgICAgIHJldHVybiBhY2N1bTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1vZE5hbWUgPSBzZWdtZW50c1swXS5zdGFydHNXaXRoKCdtb2QnKVxyXG4gICAgICA/IHNlZ21lbnRzWzBdIDogdW5kZWZpbmVkO1xyXG4gICAgY29uc3QgZGVzdGluYXRpb24gPSAoc2VnbWVudHNbMF0uc3RhcnRzV2l0aCgnZGxjJykpXHJcbiAgICAgID8gWydkbGMnXS5jb25jYXQoc2VnbWVudHMpLmpvaW4ocGF0aC5zZXApXHJcbiAgICAgIDogKG1vZE5hbWUgIT09IHVuZGVmaW5lZClcclxuICAgICAgICA/IFsnbW9kcyddLmNvbmNhdChzZWdtZW50cykuam9pbihwYXRoLnNlcClcclxuICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgIGlmIChkZXN0aW5hdGlvbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGlmIChtb2ROYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBtb2ROYW1lcy5wdXNoKG1vZE5hbWUpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGluc3RydWN0aW9uOiB0eXBlcy5JSW5zdHJ1Y3Rpb24gPSB7XHJcbiAgICAgICAgdHlwZTogJ2NvcHknLFxyXG4gICAgICAgIHNvdXJjZTogaXRlcixcclxuICAgICAgICBkZXN0aW5hdGlvbixcclxuICAgICAgfTtcclxuICAgICAgYWNjdW0ucHVzaChpbnN0cnVjdGlvbik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYWNjdW07XHJcbiAgfSwgW10pXHJcbiAgLmNvbmNhdCh7XHJcbiAgICB0eXBlOiAnYXR0cmlidXRlJyxcclxuICAgIGtleTogJ21vZENvbXBvbmVudHMnLFxyXG4gICAgdmFsdWU6IG1vZE5hbWVzLFxyXG4gIH0pO1xyXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBpbnN0cnVjdGlvbnMgfSk7XHJcbn1cclxuIl19